package com.example.demo.repository;

import static com.example.demo.entity.QProduct.product;
import static com.example.demo.entity.QCode.code;
import static com.example.demo.entity.QImg.img;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.example.demo.domain.CodeDTO;
import com.example.demo.domain.ImgDTO;
import com.example.demo.domain.ProductDTO;
import com.example.demo.entity.Img;
import com.example.demo.entity.Product;
import com.example.demo.entity.QCode;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.impl.JPAQueryFactory;

import lombok.RequiredArgsConstructor;

@Repository
@RequiredArgsConstructor
public class ProductDSLRespositoryImpl implements ProductDSLRespository {
	
	private final JPAQueryFactory jpaQueryFactory;
	
	@Override
	public List<ImgDTO> joinDSL(){
		
		QCode code1 = new QCode("code1");  
		QCode code2 = new QCode("code2");  
		QCode code3 = new QCode("code3");  
		QCode code4 = new QCode("code4");
		
		return jpaQueryFactory.select(Projections.bean(
									  ImgDTO.class, 
									  product.pro_id, 
									  product.pro_name, 
									  product.pro_des, 
									  product.pro_price, 
									  product.pro_stock,
									  product.pro_creat,
									  code1.code_name.as("pro_cate"),
									  code2.code_name.as("cate_brand"), 
									  code3.code_name.as("cate_piece"), 
									  code4.code_name.as("pro_state_cd"),
									  img.pro_imgs.as("pro_imgs")))
							  .from(product)
							  .leftJoin(code1)
							  .on(product.pro_cate.eq(code1.code_id))	
							  .leftJoin(code2)
							  .on(product.cate_brand.eq(code2.code_id))
							  .leftJoin(code3)
							  .on(product.cate_piece.eq(code3.code_id))
							  .leftJoin(code4)
							  .on(product.pro_state_cd.eq(code4.code_id))
							  .leftJoin(img)
							  .on(product.pro_id.eq(img.pro_id.pro_id).and(img.pro_num.eq(0))) 
							  .fetchJoin()
							  .fetch();
	}
	
	@Override
	public List<ImgDTO> joinDSLpage(int itemsPerPage, int currentPage, String inputValue, List<String> proCate, List<String> cateBrand){
		
		QCode code1 = new QCode("code1");  
		QCode code2 = new QCode("code2");  
		QCode code3 = new QCode("code3");  
		QCode code4 = new QCode("code4");
		
		return (List<ImgDTO>)jpaQueryFactory.select(Projections.bean(
									  ImgDTO.class, 
									  product.pro_id, 
									  product.pro_name, 
									  product.pro_des, 
									  product.pro_price, 
									  product.pro_stock,
									  product.pro_creat,
									  code1.code_name.as("pro_cate"),
									  code2.code_name.as("cate_brand"), 
									  code3.code_name.as("cate_piece"), 
									  code4.code_name.as("pro_state_cd"),
									  img.pro_imgs.as("pro_imgs")))
							  .from(product)
							  .leftJoin(code1)
							  .on(product.pro_cate.eq(code1.code_id).and(code1.code_name.in(proCate)))
							  .leftJoin(code2)
							  .on(product.cate_brand.eq(code2.code_id).and(code2.code_name.in(cateBrand)))
							  .leftJoin(code3)
							  .on(product.cate_piece.eq(code3.code_id))
							  .leftJoin(code4)
							  .on(product.pro_state_cd.eq(code4.code_id))
							  .leftJoin(img)
							  .on(product.pro_id.eq(img.pro_id.pro_id).and(img.pro_num.eq(0))) 
							  .where(product.pro_name.contains(inputValue).and(product.pro_name.contains(inputValue)))
							  .offset((currentPage - 1) * itemsPerPage)
							  .limit(itemsPerPage)
							  .fetchJoin()
							  .fetch();
	}
	
	@Override
    public List<ImgDTO> joinDSLpage1(int itemsPerPage, int currentPage, String inputValue, List<String> proCate, List<String> cateBrand) {
        QCode code1 = new QCode("code1");  
        QCode code2 = new QCode("code2");  
        QCode code3 = new QCode("code3");  
        QCode code4 = new QCode("code4");

        BooleanBuilder builder = new BooleanBuilder();
        
        // 검색어 조건 추가
        if (inputValue != null && !inputValue.isEmpty()) {
            builder.and(product.pro_name.contains(inputValue));
        }
        
        // proCate 조건 추가
        if (proCate != null && !proCate.isEmpty()) {
            builder.and(code1.code_name.in(proCate));
        }

        // cateBrand 조건 추가
        if (cateBrand != null && !cateBrand.isEmpty()) {
            builder.and(code2.code_name.in(cateBrand));
        }

        return jpaQueryFactory.select(Projections.bean(
                ImgDTO.class, 
                product.pro_id, 
                product.pro_name, 
                product.pro_des, 
                product.pro_price, 
                product.pro_stock,
                product.pro_creat,
                code1.code_name.as("pro_cate"),
                code2.code_name.as("cate_brand"), 
                code3.code_name.as("cate_piece"), 
                code4.code_name.as("pro_state_cd"),
                img.pro_imgs.as("pro_imgs")))
            .from(product)
            .leftJoin(code1).on(product.pro_cate.eq(code1.code_id))
            .leftJoin(code2).on(product.cate_brand.eq(code2.code_id))
            .leftJoin(code3).on(product.cate_piece.eq(code3.code_id))
            .leftJoin(code4).on(product.pro_state_cd.eq(code4.code_id))
            .leftJoin(img).on(product.pro_id.eq(img.pro_id.pro_id).and(img.pro_num.eq(0)))
            .where(builder)
            .offset((currentPage - 1) * itemsPerPage)
            .limit(itemsPerPage)
            .fetchJoin()
            .fetch();
    }
	
//	@Override
//	public List<ImgDTO> joinDSLpage1(int itemsPerPage, int currentPage, String inputValue, List<String> cateBrand){
//		
//		QCode code1 = new QCode("code1");  
//		QCode code2 = new QCode("code2");  
//		QCode code3 = new QCode("code3");  
//		QCode code4 = new QCode("code4");
//		
//		return (List<ImgDTO>)jpaQueryFactory.select(Projections.bean(
//				ImgDTO.class, 
//				product.pro_id, 
//				product.pro_name, 
//				product.pro_des, 
//				product.pro_price, 
//				product.pro_stock,
//				product.pro_creat,
//				code1.code_name.as("pro_cate"),
//				code2.code_name.as("cate_brand"), 
//				code3.code_name.as("cate_piece"), 
//				code4.code_name.as("pro_state_cd"),
//				img.pro_imgs.as("pro_imgs")))
//				.from(product)
//				.leftJoin(code1)
//				.on(product.pro_cate.eq(code1.code_id))
//				.leftJoin(code2)
//				.on(product.cate_brand.eq(code2.code_id).and(code2.code_name.in(cateBrand)))
//				.leftJoin(code3)
//				.on(product.cate_piece.eq(code3.code_id))
//				.leftJoin(code4)
//				.on(product.pro_state_cd.eq(code4.code_id))
//				.leftJoin(img)
//				.on(product.pro_id.eq(img.pro_id.pro_id).and(img.pro_num.eq(0))) 
//				.where(product.pro_name.contains(inputValue).and(product.pro_name.contains(inputValue)))
//				.offset((currentPage - 1) * itemsPerPage)
//				.limit(itemsPerPage)
//				.fetchJoin()
//				.fetch();
//	}
//	
//	
//	@Override
//	public List<ImgDTO> joinDSLpage(int itemsPerPage, int currentPage, String inputValue, List<String> proCate){
//		
//		QCode code1 = new QCode("code1");  
//		QCode code2 = new QCode("code2");  
//		QCode code3 = new QCode("code3");  
//		QCode code4 = new QCode("code4");
//		
//		return (List<ImgDTO>)jpaQueryFactory.select(Projections.bean(
//				ImgDTO.class, 
//				product.pro_id, 
//				product.pro_name, 
//				product.pro_des, 
//				product.pro_price, 
//				product.pro_stock,
//				product.pro_creat,
//				code1.code_name.as("pro_cate"),
//				code2.code_name.as("cate_brand"), 
//				code3.code_name.as("cate_piece"), 
//				code4.code_name.as("pro_state_cd"),
//				img.pro_imgs.as("pro_imgs")))
//				.from(product)
//				.leftJoin(code1)
//				.on(product.pro_cate.eq(code1.code_id).and(code1.code_name.in(proCate)))
//				.leftJoin(code2)
//				.on(product.cate_brand.eq(code2.code_id))
//				.leftJoin(code3)
//				.on(product.cate_piece.eq(code3.code_id))
//				.leftJoin(code4)
//				.on(product.pro_state_cd.eq(code4.code_id))
//				.leftJoin(img)
//				.on(product.pro_id.eq(img.pro_id.pro_id).and(img.pro_num.eq(0))) 
//				.where(product.pro_name.contains(inputValue).and(product.pro_name.contains(inputValue)))
//				.offset((currentPage - 1) * itemsPerPage)
//				.limit(itemsPerPage)
//				.fetchJoin()
//				.fetch();
//	}
//	@Override
//	public List<ImgDTO> joinDSLpage(int itemsPerPage, int currentPage, String inputValue){
//		
//		QCode code1 = new QCode("code1");  
//		QCode code2 = new QCode("code2");  
//		QCode code3 = new QCode("code3");  
//		QCode code4 = new QCode("code4");
//		
//		return (List<ImgDTO>)jpaQueryFactory.select(Projections.bean(
//				ImgDTO.class, 
//				product.pro_id, 
//				product.pro_name, 
//				product.pro_des, 
//				product.pro_price, 
//				product.pro_stock,
//				product.pro_creat,
//				code1.code_name.as("pro_cate"),
//				code2.code_name.as("cate_brand"), 
//				code3.code_name.as("cate_piece"), 
//				code4.code_name.as("pro_state_cd"),
//				img.pro_imgs.as("pro_imgs")))
//				.from(product)
//				.leftJoin(code1)
//				.on(product.pro_cate.eq(code1.code_id))
//				.leftJoin(code2)
//				.on(product.cate_brand.eq(code2.code_id))
//				.leftJoin(code3)
//				.on(product.cate_piece.eq(code3.code_id))
//				.leftJoin(code4)
//				.on(product.pro_state_cd.eq(code4.code_id))
//				.leftJoin(img)
//				.on(product.pro_id.eq(img.pro_id.pro_id).and(img.pro_num.eq(0))) 
//				.where(product.pro_name.contains(inputValue).and(product.pro_name.contains(inputValue)))
//				.offset((currentPage - 1) * itemsPerPage)
//				.limit(itemsPerPage)
//				.fetchJoin()
//				.fetch();
//	}
	
	/*
	 * @Override public Product insertDSL() { return jpaQueryFactory.insert(product)
	 * ; }
	 */
	@Override
	public Product selectOneDSL(String proId) {
		
		QCode code1 = new QCode("code1");  
		QCode code2 = new QCode("code2");  
		QCode code3 = new QCode("code3");  
		QCode code4 = new QCode("code4");
		

		return  jpaQueryFactory.select(Projections.bean(
				Product.class, 
				product.pro_id, 
				product.pro_name, 
				product.pro_des, 
				product.pro_price, 
				product.pro_stock,
				product.pro_creat,
				code1.code_name.as("pro_cate"),
				code2.code_name.as("cate_brand"), 
				code3.code_name.as("cate_piece"), 
				code4.code_name.as("pro_state_cd")))
				.from(product)
				.leftJoin(code1)
				.on(product.pro_cate.eq(code1.code_id))	
				.leftJoin(code2)
				.on(product.cate_brand.eq(code2.code_id))
				.leftJoin(code3)
				.on(product.cate_piece.eq(code3.code_id))
				.leftJoin(code4)
				.on(product.pro_state_cd.eq(code4.code_id))
				.where(product.pro_id.eq(proId))
				.fetchOne();
	}


	@Override
	public Long update(Product productEntity, String proId) {
		return jpaQueryFactory.update(product)
							  .set(product.pro_name, productEntity.getPro_name())
							  .set(product.pro_price, productEntity.getPro_price())
							  .set(product.pro_stock, productEntity.getPro_stock())
							  .set(product.pro_cate, productEntity.getPro_cate())
							  .set(product.cate_brand, productEntity.getCate_brand())
							  .set(product.cate_piece, productEntity.getCate_piece())
							  .set(product.pro_state_cd, productEntity.getPro_state_cd())
							  .where(product.pro_id.eq(proId))
							  .execute();
	}
	
	
	@Override
	public List<ImgDTO> searchList(String productname){
		
		QCode code1 = new QCode("code1");  
		QCode code2 = new QCode("code2");  
		QCode code3 = new QCode("code3");  
		QCode code4 = new QCode("code4");
		
		return jpaQueryFactory.select(Projections.bean(
									  ImgDTO.class, 
									  product.pro_id, 
									  product.pro_name, 
									  product.pro_des, 
									  product.pro_price, 
									  product.pro_stock,
									  product.pro_creat,
									  code1.code_name.as("pro_cate"),
									  code2.code_name.as("cate_brand"), 
									  code3.code_name.as("cate_piece"), 
									  code4.code_name.as("pro_state_cd"),
									  img.pro_imgs.as("pro_imgs")))
							  .from(product)
							  .leftJoin(code1)
							  .on(product.pro_cate.eq(code1.code_id))	
							  .leftJoin(code2)
							  .on(product.cate_brand.eq(code2.code_id))
							  .leftJoin(code3)
							  .on(product.cate_piece.eq(code3.code_id))
							  .leftJoin(code4)
							  .on(product.pro_state_cd.eq(code4.code_id))
							  .leftJoin(img)
							  .on(product.pro_id.eq(img.pro_id.pro_id).and(img.pro_num.eq(0)))
							  .where(product.pro_name.contains(productname).and(product.pro_name.contains(productname)))
							  .fetchJoin()
							  .fetch();
	}
	
	
	
	@Override
	public Long countAllProduct(String inputValue) {
	    return jpaQueryFactory
	            .select(product.count()) 
	            .from(product)
				 .where(product.pro_name.contains(inputValue).and(product.pro_name.contains(inputValue)))
	            .fetchOne();
	}

}
